#+TITLE:  Programmiersprachen:  Aufgabe 1
#+STARTUP: logdone auto-fill-mode

* Building
#+BEGIN_SRC sh
mkdir build
cd build
cmake ..
make
#+END_SRC

* Running
#+BEGIN_SRC sh
cd source
./helloworld
./tests
#+END_SRC

* Aufgabe 1.4
  *Typenkonvertierung:* Auf verschiedene Weisen kann eine Variable von
  einem Typen in einen anderen umgewandelt werden, wie z.B. im
  Beispiel unten.  Bei den Elementardatentypen (/built-ins/) fallen
  ggf. Informationen weg, z.B. bei Konvertierung von =double= nach
  =float= oder =float= nach =int=.  Eine Konvertierung wie von
  negativen =int= nach =unsigned= liefert kein brauchbares Ergebnis,
  da =unsigned= natürlich keine negativen Ganzzahlen darstellen kann.

  Die Typen im Beispiel unten sind alle /built-ins/.  Die /built-ins/
  (=int=, =bool=, etc.)  sind nicht zu verwechseln mit den
  Standarddatentypen (=std::*=).  Datentypen bspw. von Klassen sind
  /zusammengesetzt/.

#+BEGIN_SRC cpp
int main() {
    // Der Variablen `a` vom Typ `int` (Ganzzahl) wird der Wert `9` zugewiesen.
    int a = 9;

    // Der Variablen `b` vom Typ `bool` (Boolean) wird der Wert `false` zugewiesen.
    bool b = false;

    // Der Variablen `d` vom Type `double` (Fließkommazahl) wird der Wert `1.3` zugewiesen.
    double d = 1.3;

    // Der Konstanten (`const`) namens `five` vom Typ `int` wird der Wert `5` zugewiesen.
    // D. h. der Wert der Variablen ist immer `5` und nicht veränderbar.[2]
    int const five = 5;

    // Der Variablen `e` vom Typ `e` wird Wert der Division `a/five`, also `9/5` zugewiesen.
    // Es wird zunächst die rechte Seite zu `1` evaluiert.  Da beide Operanden Ganzzahlen sind,
    // findet ein Ganzzahldivision statt.  Diese wird dann in ein `double` konvertiert, d.h. `e`
    // nimmt den Wert `1.0` an.
    double e = a/five;

    // Hier wird der Compiler einen Fehler werden, da `five` eine Konstante ist und nicht verändert
    // werden kann.[2]
    five = d;

    return 0;
}
#+END_SRC

* Aufgabe 1.5
  Bei einer *Initialisierung* eines Objektes wird ein neues Objekt =bar=
  aus dem existierenden Objekt =baz= erstellt.  Mögliche Formen sind
  die /direct initialization/ =Foo bar{baz};= und die /copy
  initialization/ =Foo bar = baz;=.  In beiden Fällen wird der
  Copy-Konstruktur von =Foo= verwendet.

  Die *Zuweisung* hat die Form =bar = baz;=.  Dem bereits
  existierenden (!)  Objekt =bar= werden die Werte des Objektes =baz=
  zugewiesen.  Anders als bei z.B. /Java/ wird hier nicht der Pointer
  auf das Objekt kopiert

  #+BEGIN_SRC cpp
#include <iostream>

class Foo{
    public:
        int n();
        void n(int a);
    private:
        int n_ = 42;
};

void Foo::n(int a) {
    n_ = a;
}

int Foo::n() {
    return n_;
}

int main() {
    Foo a = Foo{};
    Foo b = Foo{};
    std::cout << "a:" << a.n() << " b:" << b.n() << "\n";  // a:42 b:42
    b.n(21);
    a = b; // `b`s members are copied to `a`
    std::cout << "a:" << a.n() << " b:" << b.n() << "\n";  // a:21 b:21
    a.n(4);
    std::cout << "a:" << a.n() << " b:" << b.n() << "\n";  // a:4 b:21
}
  #+END_SRC
* Aufgabe 1.6
  |            | *Deklaration*                           | *Definition*                                                 |
  | *Funktion* | ~int is_positive(int);~ Name + Signatur | ~int is_prositive(int n) { return n > 0; }~ Verhalten        |
  | *Variable* | ~int n;~ Typ + Name                     | ~n = 4;~ Wert                                                |
  | *Datentyp* | ~class Foo;~ Name                       | ~class Foo { public: int bar(); };~ Member werden deklariert |
* Aufgabe 1.7
* Literatur
[1]:  https://en.cppreference.com/w/cpp/language/operator_arithmetic#Conversions

[2]:  https://en.cppreference.com/w/cpp/language/cv
